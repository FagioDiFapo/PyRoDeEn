# Modern pyproject.toml following PEP 621, PEP 517/518 standards
# See: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[build-system]
# Defines how to build the package (PEP 517/518)
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
# Core metadata (PEP 621)
name = "rde-solver"  # Changed to follow naming conventions (hyphens, not underscores)
version = "0.1.0"
description = "High-performance CFD solvers for Rotating Detonation Engine simulation"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}  # Or whatever license you're using
authors = [
    {name = "Genis Bonet Garcia", email = "gbonetgarcia@gmail.com"}
]
maintainers = [
    {name = "Genis Bonet Garcia", email = "gbonetgarcia@gmail.com"}
]
keywords = ["CFD", "Riemann solver", "MUSCL", "RDE", "detonation", "JAX"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Physics",
]

# Runtime dependencies (what users need to use your package)
dependencies = [
    "numpy>=1.20",
    "scipy>=1.7",
    "matplotlib>=3.4",
    "jax>=0.3",           # Add if using JAX
    "jaxlib>=0.3",        # JAX backend
    # Add others as needed
]

# Optional dependencies - users can install with: pip install rde-solver[dev]
[project.optional-dependencies]
# Development dependencies (testing, linting, type checking)
dev = [
    "pytest>=7.0",
    "pytest-cov>=3.0",         # Coverage reports
    "pytest-xdist>=2.5",       # Parallel test execution
    "pytest-benchmark>=4.0",   # Performance benchmarking in pytest
    "black>=22.0",             # Code formatting
    "ruff>=0.0.270",           # Fast linter
    "mypy>=0.990",             # Type checking
    "pre-commit>=2.20",        # Git hooks for code quality
]

# Documentation dependencies
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "sphinx-autodoc-typehints>=1.19",
    "myst-parser>=0.18",       # Markdown support in Sphinx
    "nbsphinx>=0.8",           # Jupyter notebook docs
]

# Chemistry validation dependencies
chemistry = [
    "cantera>=3.0",            # For validation against Cantera
]

# Full installation (everything)
all = [
    "rde-solver[dev,docs,chemistry]",
]

# CLI entry points - These create executable commands
# STANDARD PRACTICE: Use this for main user-facing commands
[project.scripts]
# Format: command-name = "package.module:function"
# These are installed as executable scripts in the user's PATH

# Main solver commands (what you have is correct!)
rde-muscl-1d = "rde_solver.cli:run_muscl_1d"
rde-muscl-2d = "rde_solver.cli:run_muscl_2d"
rde-sod-tube = "rde_solver.cli:run_sod_tube"

# You can also add utility commands
rde-validate = "rde_solver.cli:validate_installation"
rde-benchmark = "rde_solver.cli:run_benchmarks"

# NOTE: You would create a cli.py module with these functions
# They should be simple wrappers around your main code

[project.urls]
Homepage = "https://github.com/FagioDiFapo/ApproximateRiemannSolversPy"
Documentation = "https://approximate-riemann-solvers-py.readthedocs.io"
Repository = "https://github.com/FagioDiFapo/ApproximateRiemannSolversPy"
"Bug Tracker" = "https://github.com/FagioDiFapo/ApproximateRiemannSolversPy/issues"

# Setuptools-specific configuration
[tool.setuptools]
# Use src layout (recommended)
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["rde_solver*"]
namespaces = false

# Include data files (mechanism files, reference solutions, etc.)
[tool.setuptools.package-data]
"rde_solver.chemistry.mechanisms" = ["*.yaml", "*.xml", "*.cti"]
"rde_solver.data" = ["*.csv", "*.dat"]

# ============================================================================
# TESTING CONFIGURATION (pytest)
# ============================================================================
# STANDARD PRACTICE: Configure pytest here, NOT in project.scripts
[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output options
addopts = [
    "-ra",                      # Show summary of all test outcomes
    "--strict-markers",         # Require markers to be registered
    "--strict-config",          # Error on unknown config options
    "--showlocals",            # Show local variables in tracebacks
    "--tb=short",              # Shorter traceback format
    "-v",                      # Verbose output
]

# Coverage options (when running pytest --cov)
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# ============================================================================
# CODE QUALITY TOOLS
# ============================================================================

# Black - Code formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | \.eggs
  | build
  | dist
  | matlab_reference
)/
'''

# Ruff - Fast linting (replaces flake8, isort, etc.)
[tool.ruff]
line-length = 88
target-version = "py39"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

ignore = [
    "E501",  # Line too long (Black handles this)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py
"tests/*" = ["F401", "F811"]  # More lenient in tests

# Mypy - Type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true once you add type hints everywhere
ignore_missing_imports = true  # For libraries without type stubs

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# ============================================================================
# BENCHMARK CONFIGURATION (pytest-benchmark)
# ============================================================================
[tool.pytest.benchmark]
# Benchmark configuration when using pytest-benchmark plugin
min_rounds = 5
min_time = 0.000005
max_time = 1.0
warmup = true
warmup_iterations = 2
